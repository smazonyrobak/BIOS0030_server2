import { Signal } from '@lumino/signaling';
import { hasKernelSession } from './types';
/**
 * Tracks widgets with kernels as well as possible given the available tokens.
 */
export class KernelWidgetTracker {
    constructor(options) {
        var _a, _b;
        this._currentWidget = null;
        const { labShell, notebookTracker, consoleTracker } = options;
        this._currentChanged = new Signal(this);
        if (labShell) {
            labShell.currentChanged.connect((_, update) => {
                const widget = update.newValue;
                if (widget && hasKernelSession(widget)) {
                    this._currentChanged.emit(widget);
                    this._currentWidget = widget;
                }
                else {
                    this._currentChanged.emit(null);
                    this._currentWidget = null;
                }
            });
        }
        else {
            notebookTracker.currentChanged.connect((_, widget) => {
                this._currentChanged.emit(widget);
                this._currentWidget = widget;
            });
            if (consoleTracker) {
                consoleTracker.currentChanged.connect((_, widget) => {
                    this._currentChanged.emit(widget);
                    this._currentWidget = widget;
                });
            }
        }
        // handle an existing current widget in case the KernelWidgetTracker
        // is created a bit later, or if there is already a Notebook widget available
        // on page load like in Notebook 7.
        if ((labShell === null || labShell === void 0 ? void 0 : labShell.currentWidget) && hasKernelSession(labShell === null || labShell === void 0 ? void 0 : labShell.currentWidget)) {
            this._currentWidget = labShell.currentWidget;
        }
        else {
            this._currentWidget =
                (_b = (_a = notebookTracker.currentWidget) !== null && _a !== void 0 ? _a : consoleTracker === null || consoleTracker === void 0 ? void 0 : consoleTracker.currentWidget) !== null && _b !== void 0 ? _b : null;
        }
    }
    /**
     * Emits on any change of active widget. The value is a known widget with
     * kernel session or null if user switched to a widget which does not support
     * kernel sessions.
     */
    get currentChanged() {
        return this._currentChanged;
    }
    get currentWidget() {
        return this._currentWidget;
    }
}
