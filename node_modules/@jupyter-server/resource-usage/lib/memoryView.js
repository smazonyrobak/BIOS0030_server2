import { ReactWidget } from '@jupyterlab/apputils';
import React, { useState, useEffect } from 'react';
import { IndicatorComponent } from './indicator';
/**
 * A MemoryView component to display memory usage.
 */
const MemoryViewComponent = ({ model, label, }) => {
    const [text, setText] = useState('');
    const [values, setValues] = useState([]);
    const update = () => {
        const { memoryLimit, currentMemory, units } = model;
        const precision = ['B', 'KB', 'MB'].indexOf(units) > 0 ? 0 : 2;
        const newText = `${currentMemory.toFixed(precision)} ${memoryLimit ? '/ ' + memoryLimit.toFixed(precision) : ''} ${units}`;
        const newValues = model.values.map((value) => value.memoryPercent);
        setText(newText);
        setValues(newValues);
    };
    useEffect(() => {
        model.stateChanged.connect(update);
        return () => {
            model.stateChanged.disconnect(update);
        };
    }, [model]);
    return (React.createElement(IndicatorComponent, { enabled: model.memoryAvailable, values: values, label: label, color: '#00B35B', text: text }));
};
export var MemoryView;
(function (MemoryView) {
    /**
     * Create a new MemoryView React Widget.
     *
     * @param model The resource usage model.
     * @param label The label next to the component.
     */
    MemoryView.createMemoryView = (model, label) => {
        return ReactWidget.create(React.createElement(MemoryViewComponent, { model: model, label: label }));
    };
})(MemoryView || (MemoryView = {}));
