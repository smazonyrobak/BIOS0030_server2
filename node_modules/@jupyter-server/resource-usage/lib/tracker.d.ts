import { ILabShell } from '@jupyterlab/application';
import { INotebookTracker } from '@jupyterlab/notebook';
import { IConsoleTracker } from '@jupyterlab/console';
import { ISignal } from '@lumino/signaling';
import { IWidgetWithSession } from './types';
/**
 * Tracks widgets with kernels as well as possible given the available tokens.
 */
export declare class KernelWidgetTracker {
    constructor(options: KernelWidgetTracker.IOptions);
    /**
     * Emits on any change of active widget. The value is a known widget with
     * kernel session or null if user switched to a widget which does not support
     * kernel sessions.
     */
    get currentChanged(): ISignal<KernelWidgetTracker, IWidgetWithSession | null>;
    get currentWidget(): IWidgetWithSession | null;
    private _currentChanged;
    private _currentWidget;
}
/**
 * Namespace for kernel widget tracker.
 */
export declare namespace KernelWidgetTracker {
    interface IOptions {
        notebookTracker: INotebookTracker;
        labShell: ILabShell | null;
        consoleTracker: IConsoleTracker | null;
    }
}
