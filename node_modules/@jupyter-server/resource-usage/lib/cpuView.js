import { ReactWidget } from '@jupyterlab/apputils';
import React, { useEffect, useState } from 'react';
import { IndicatorComponent } from './indicator';
/**
 * A CpuView component to display CPU usage.
 */
const CpuViewComponent = ({ model, label, }) => {
    const [text, setText] = useState('');
    const [values, setValues] = useState([]);
    const update = () => {
        const { cpuLimit, currentCpuPercent } = model;
        const newValues = model.values.map((value) => Math.min(1, value.cpuPercent / (cpuLimit || 1)));
        const newText = `${(currentCpuPercent * 100).toFixed(0)}%`;
        setText(newText);
        setValues(newValues);
    };
    useEffect(() => {
        model.stateChanged.connect(update);
        return () => {
            model.stateChanged.disconnect(update);
        };
    }, [model]);
    return (React.createElement(IndicatorComponent, { enabled: model.cpuAvailable, values: values, label: label, color: '#0072B3', text: text }));
};
/**
 * A namespace for CpuView statics.
 */
export var CpuView;
(function (CpuView) {
    /**
     * Create a new CpuView React Widget.
     *
     * @param model The resource usage model.
     * @param label The label next to the component.
     */
    CpuView.createCpuView = (model, label) => {
        return ReactWidget.create(React.createElement(CpuViewComponent, { model: model, label: label }));
    };
})(CpuView || (CpuView = {}));
